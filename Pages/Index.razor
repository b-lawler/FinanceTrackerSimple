@page "/"
@using FinanceTrackerSimple.Data
@using FinanceTrackerSimple.Data.IRepositories
@inject IAccountRepository accountRepository
@using ChartJs.Blazor.LineChart
@using System.Collections.Generic


<h1 class="display-6 text-center">Overview</h1>

@if(Accounts != null) {

    <div class="mb-5">
        <Chart Config="_config"></Chart>
    </div>

    <div class="row">
        <div class="col-6">
            <h2>Accounts</h2>
        </div>
        <div class="col-6">
            <a href="AddAccount" class="btn btn-info float-right mb-2">+ Add Account</a>
        </div>
    </div>

    <table class="table table-striped mb-5">
        <thead>
            <tr>
                <th scope="col">Name</th>
                <th class="clickable" @onclick="SortColumnDate" scope="col">Current Value</th>
            </tr>
        </thead>
        <tbody>
            @foreach(Account account in Accounts.Where(a => a.Values.Count > 0 && a.Active)) {
                <tr class="@(account.IsRedStale ? "red-stale" : account.IsYellowStale ? "yellow-stale" : "")">
                    <td class="account-name"><a href="/Account/@account.Id">@account.Name</a></td>
                    <td class="account-value @(account.CurrentValue.Value > 0 ? "positive-value" : "negative-value" )">
                        <div>
                            @account.CurrentValue.FormattedValue
                        </div>
                        <small class="text-muted date-added">(@account.CurrentValue.CreateDate.ToShortDateString())</small>
                    </td>
                </tr>
            }
        </tbody>
        <tfoot>
            <tr class="table-info">
                <td>Total</td>
                <td>@Accounts.Where(a => a.Active).Sum(a => a.CurrentValue.Value).ToString("C")</td>
            </tr>
        </tfoot>
    </table>

} else {
    <h5>Loading...</h5>
}

@code{
    public List<Account> Accounts { get; set; }
    public int CurrentDateSort { get; set; }
    private LineConfig _config;

    protected async override Task OnInitializedAsync() {
        Accounts = await accountRepository.GetActiveAccounts();
        _config = new LineConfig {
            Options = new LineOptions {
                Legend = new Legend {
                    Display = false
                },
                Responsive = true,
                Title = new OptionsTitle {
                    Display = false
                },
                Tooltips = new Tooltips {
                    Mode = InteractionMode.Nearest,
                    Intersect = true
                },
                Hover = new Hover {
                    Mode = InteractionMode.Nearest,
                    Intersect = false,
                },
                Scales = new Scales {
                    XAxes = new List<CartesianAxis>{
                        new CategoryAxis{
                            ScaleLabel = new ScaleLabel{
                                LabelString = "Month"
                            }
                        }
                    },
                    YAxes = new List<CartesianAxis>{
                        new LinearCartesianAxis{
                            ScaleLabel = new ScaleLabel{
                                LabelString = "Value"
                            }
                        }
                    }
                }
            }
        };

        IDataset<int> dataset = new LineDataset<int>(new[] { 14, 22, 25, 11, 53 }) {
            Label = null,
            BackgroundColor = ColorUtil.FromDrawingColor(Color.Red),
            BorderColor = ColorUtil.FromDrawingColor(Color.Red),
            Fill = FillingMode.Disabled
        };

        _config.Data.Labels.AddRange(new[] { "January", "February", "March", "April", "May" });
        _config.Data.Datasets.Add(dataset);
    }

    private void SortColumnDate() {
        if(CurrentDateSort == 1) {
            Accounts = Accounts.OrderBy(a => a.LastUpdated).ToList();
            CurrentDateSort = 0;
        } else {
            Accounts = Accounts.OrderByDescending(a => a.LastUpdated).ToList();
            CurrentDateSort = 1;
        }
    }

}