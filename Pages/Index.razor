@page "/"
@using FinanceTrackerSimple.Data
@using FinanceTrackerSimple.Data.IRepositories
@inject IAccountRepository accountRepository

@if(Accounts != null) {

    <div class="row">
        <div class="col-6">
            <h2>Accounts</h2>
        </div>
        <div class="col-6">
            <a href="AddAccount" class="btn btn-info float-right mb-2">+ Add Account</a>
        </div>
    </div>

    <table class="table table-striped">
        <thead>
            <tr>
                <th scope="col">Name</th>
                <th class="clickable" @onclick="SortColumnDate" scope="col">Current Value</th>
            </tr>
        </thead>
        <tbody>
            @foreach(Account account in Accounts.Where(a => a.Values.Count > 0)) {
                <tr>
                    <td class="account-name"><a href="/Account/@account.Id">@account.Name</a></td>
                    <td class="account-value @(account.CurrentValue.Value > 0 ? "positive-value" : "negative-value" )">
                        <div>
                            @account.CurrentValue.FormattedValue
                        </div>
                        <small class="text-muted date-added">(@account.CurrentValue.CreateDate.ToShortDateString())</small>
                    </td>
                </tr>
            }
        </tbody>
        <tfoot>
            <tr class="table-info">
                <td>Total</td>
                <td>@Accounts.Where(a => a.Active).Sum(a => a.CurrentValue.Value).ToString("C")</td>
            </tr>
        </tfoot>
    </table>

} else {
    <h5>Loading...</h5>
}

@code{
    public List<Account> Accounts { get; set; }
    public int CurrentDateSort { get; set; }

    protected async override Task OnInitializedAsync() {
        Accounts = await accountRepository.GetActiveAccounts();
    }

    private void SortColumnDate() {
        if(CurrentDateSort == 1) {
            Accounts = Accounts.OrderBy(a => a.LastUpdated).ToList();
            CurrentDateSort = 0;
        } else {
            Accounts = Accounts.OrderByDescending(a => a.LastUpdated).ToList();
            CurrentDateSort = 1;
        }
    }

}