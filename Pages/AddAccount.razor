@page "/AddAccount"
@using FinanceTrackerSimple.Data
@using FinanceTrackerSimple.Data.IRepositories
@inject IAccountRepository accountService
@inject IAccountValueRepository accountValueService
@inject NavigationManager navigationManager

<div class="row">
    <div class="col col-md-6">
        <h3>Add Account</h3>

        <EditForm Model="@newAccount" OnValidSubmit="AddNewAccount">
            <div class="mt-3">
                <label for="accountName">Account Name</label>
                <InputText id="accountName" class="form-control" type="text" @bind-Value="@newAccount.Name" />
            </div>
            <div class="mt-3">
                <label for="link">Website Link</label>
                <InputText id="link" class="form-control" @bind-Value="@newAccount.Link"></InputText>
            </div>
            <div class="mt-3">
                <label for="accountValue">Current Value</label>
                <InputNumber id="accountValue" class="form-control" @bind-Value="@newAccountValue.Value"></InputNumber>
            </div>
            <button class="btn btn-primary mt-3">Add Account</button>
            <a href="/" class="btn btn-danger mt-3">Cancel</a>
        </EditForm>
        @if(newAccount.Id > 0) {
            <h3 style="color:green;">Success</h3>
        }
        @if(loading) {
            <h4>Loading...</h4>
        }
    </div>
</div>

@code{

    Account newAccount = new Account();
    AccountValue newAccountValue = new AccountValue();

    String currentValue = string.Empty;
    bool loading = false;

    public async Task AddNewAccount() {
        newAccount.Values.Add(newAccountValue);
        loading = true;
        await Task.Delay(1);
        System.Threading.Thread.Sleep(750);
        bool newAccountInsertSuccess = await accountService.InsertAccount(newAccount);


        loading = false;
        await Task.Delay(1);
        StateHasChanged();
        if(newAccountInsertSuccess) {
            await Task.Delay(1500);
            navigationManager.NavigateTo("/");
        }
    }
}