@page "/Account/{AccountId:int}"
@using FinanceTrackerSimple.Data
@using FinanceTrackerSimple.Data.IRepositories
@inject IAccountRepository accountRepository
@inject IAccountValueRepository accountValueRepository

@if(DetailAccount != null) {
    <div class="row">
        <div class="col-12">
            <h3 id="accountName" class="text-info">@(EditMode ? "Update" : "") @DetailAccount.Name</h3>
            <button id="editAccountBtn" @onclick="EditClick" class="btn btn-sm btn-secondary mx-3">Edit</button>
        </div>
    </div>
    @if(EditMode) {
        <EditForm Model="DetailAccount" OnValidSubmit="SaveDetails">
            <div class="row">
                <div class="col-md-6">
                    <span>Name: </span><InputText class="form-control" @bind-Value="@DetailAccount.Name" />
                </div>
            </div>
            <div class="row">
                <div class="col-md-6">
                    <span>Link: </span><InputText class="form-control" @bind-Value="@DetailAccount.Link" />
                </div>
            </div>
            <div class="row mt-3">
                <div class="col-md-6">
                    <button class="btn btn-primary">Save Changes</button>
                    <button @onclick="() => { EditMode = false; }" class="btn btn-secondary">Cancel</button>
                </div>
            </div>
        </EditForm>
    } else {
        <div class="row">
            <div class="col-sm">
                <a class="text-muted" target="_blank" href="@DetailAccount.Link">@DetailAccount.Link</a>
            </div>
        </div>

        @if(AddingValue) {
            <EditForm Model="@NewAccountValue" OnValidSubmit="@AddAccountValue">
                <div class="mb-3">
                    <label for="accountValue">Account Value</label>
                    <InputNumber id="accountValue" class="form-control" @bind-Value="NewAccountValue.Value"></InputNumber>
                </div>

                <div class="mb-3">
                    <button class="btn btn-success">Update</button>
                    <button type="button" @onclick="(() => AddingValue = false)" class="btn btn-danger">Cancel</button>
                </div>
            </EditForm>
        }

        <div class="mt-5">
            <div class="row">
                <div class="col-6">
                    <h4>Historical Values</h4>
                </div>
                <div class="col-6">
                    <button class="btn btn-outline-primary float-right mb-3" @onclick="(() => AddingValue = true)">+ Add Value</button>
                </div>
            </div>
            @if(DetailAccount.Values.Count > 0) {
                <table class="table table-striped table-hover">
                    <thead>
                        <tr>
                            <th>Date</th>
                            <th>Value</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach(AccountValue value in DetailAccount.Values.OrderByDescending(v => v.CreateDate)) {
                            <tr>
                                <td>@value.CreateDate.ToShortDateString() @value.CreateDate.ToShortTimeString()</td>
                                <td>@value.FormattedValue</td>
                            </tr>
                        }
                    </tbody>

                </table>
            }
        </div>

    }

}

@code {
    [Parameter]
    public int AccountId { get; set; }
    public Account DetailAccount { get; set; }
    public bool EditMode { get; set; }
    public bool AddingValue { get; set; }
    public AccountValue NewAccountValue { get; set; } = new AccountValue();

    protected async override Task OnInitializedAsync() {
        DetailAccount = await accountRepository.GetAccount(AccountId);
        NewAccountValue.AccountId = DetailAccount.Id;
        NewAccountValue.Value = DetailAccount.CurrentValue.Value;
    }

    private void EditClick() {
        EditMode = true;
    }

    private async Task SaveDetails() {
        Account updatedAccount = await accountRepository.UpdateAccount(DetailAccount);
        EditMode = false;
    }

    private async Task AddAccountValue() {
        bool insertSuccess = await accountValueRepository.InsertAccountValueAsync(NewAccountValue);
        decimal newValue = NewAccountValue.Value;
        if(insertSuccess) {
            // show toastr
            NewAccountValue = new AccountValue();
            NewAccountValue.Value = newValue;
            NewAccountValue.AccountId = DetailAccount.Id;
        }
    }
}
