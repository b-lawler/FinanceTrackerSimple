@page "/"
@inject IAccountRepository accountRepository
@inject IAccountValueRepository accountValueRepository
@using ChartJs.Blazor
@using ChartJs.Blazor.Common
@using ChartJs.Blazor.Common.Axes
@using ChartJs.Blazor.Common.Enums
@using ChartJs.Blazor.LineChart
@using System.Collections.Generic
@using System.Security.Claims;
@using ChartJs.Blazor.Util
@using SimpleFinanceTracker.Core.Data.IRepositories
@using SimpleFinanceTracker.Core.Models
@using System.Drawing
@using System.Linq
@using System;
@using SimpleFinanceTracker.UI.Pages


<h1 class="display-6 text-center">Overview</h1>

@if(Accounts != null) {
    <div class="row align-items-start">
        <div class="col mt-2 sft-card">
            <div class="row justify-content-center">
                <h3>Historical Value</h3>
            </div>
            <div class="row">
                <Chart Config="_config"></Chart>
            </div>
            <div class="row justify-content-center">
                <div class="col-md-2">
                    <select class="custom-select" @onchange="ChangeDateRange">
                        <option value="15">15 Days</option>
                        <option selected value="45">45 Days</option>
                        <option value="90">90 Days</option>
                    </select>
                </div>
            </div>
        </div>
        <div class="col mt-4 mt-md-2 sft-card">
            <div class="row justify-content-center">
                <div class="text-center">
                    <h3>Accounts</h3>
                </div>

                <a id="addAccount" href="AddAccount" class="btn btn-info btn-sm">+ New</a>
            </div>
            <table class="table mb-5">
                <thead>
                    <tr>
                        <th scope="col">Name</th>
                        <th class="clickable" @onclick="SortColumnDate" scope="col">Current Value</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach(Account account in Accounts.Where(a => a.Values.Count > 0 && a.Active && !a.Hidden)) {
                        <tr class="@(account.IsRedStale ? "red-stale" : account.IsYellowStale ? "yellow-stale" : "")">
                            <td class="account-name"><a href="/Account/@account.Id">@account.Name</a></td>
                            <td class="account-value @(account.CurrentValue.Value > 0 ? "positive-value" : "negative-value" )">
                                <div>
                                    @account.CurrentValue.Value.ToString("C")
                                </div>
                                <small class="text-muted date-added">(@account.CurrentValue.CreateDate.ToShortDateString())</small>
                            </td>
                        </tr>
                    }

                    @if(Accounts.Any(a => a.Hidden) && !ShowHiddenAccounts) {
                        <tr>
                            <td colspan="2" class="text-center"><button @onclick="() => { ShowHiddenAccounts = true; }" type="button" class="btn btn-link">+ See Hidden Accounts</button></td>
                        </tr>
                    } else if(Accounts.Any(a => a.Hidden) && ShowHiddenAccounts) {
                        <tr>
                            <td colspan="2" class="text-center">
                                <button @onclick="() => { ShowHiddenAccounts = false; }" type="button" class="btn btn-link">- Hide Hidden Accounts</button>
                            </td>
                        </tr>
                        @foreach(Account account in Accounts.Where(a => a.Values.Count() > 0 && a.Active && a.Hidden)) {
                            <tr>
                                <td class="account-name"><a href="/Account/@account.Id">@account.Name</a></td>
                                <td class="account-value">
                                    <div>
                                        @account.CurrentValue.FormattedValue
                                    </div>
                                    <small class="text-muted date-added">(@account.CurrentValue.CreateDate.ToShortDateString())</small>
                                </td>
                            </tr>
                        }
                    }

                </tbody>
                <tfoot>
                    <tr class="table-info">
                        <td colspan="2">@Accounts.Where(a => a.Active).Sum(a => a.CurrentValue.Value).ToString("C")</td>
                    </tr>
                </tfoot>
            </table>
        </div>
    </div>

} else {
    <h5>Loading...</h5>
}

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    public List<Account> Accounts { get; set; }
    public int CurrentDateSort { get; set; }
    private LineConfig _config;
    private int historicalDaysCount;
    Dictionary<DateTime, decimal> dailyAccountValues;
    public bool ShowHiddenAccounts { get; set; }
    public string UserId { get; set; }

    protected async override Task OnInitializedAsync() {
        var authState = await authenticationStateTask;
        var user = authState.User;

        UserId = user.FindFirstValue(ClaimTypes.NameIdentifier);

        historicalDaysCount = 45;
        Accounts = await accountRepository.GetActiveAccountsForUser(UserId);

        _config = new LineConfig {
                Options = new LineOptions {
                    Legend = new Legend {
                        Display = false
                    },
                    Responsive = true,
                    Title = new OptionsTitle {
                        Display = false
                    },
                    Tooltips = new Tooltips {
                        Mode = InteractionMode.Nearest,
                        Intersect = true
                    },
                    Hover = new Hover {
                        Mode = InteractionMode.Nearest,
                        Intersect = false,
                    },
                    Scales = new Scales {
                        XAxes = new List<CartesianAxis>{
                        new CategoryAxis{
                            ScaleLabel = new ScaleLabel{
                                LabelString = "Month"
                            }
                        }
                    },
                        YAxes = new List<CartesianAxis>{
                        new LinearCartesianAxis{
                            ScaleLabel = new ScaleLabel{
                                LabelString = "Value"
                            }
                        }
                    }
                    }
                }
            };

        UpdateGraph();
    }

    private void SortColumnDate() {
        if(CurrentDateSort == 1) {
            Accounts = Accounts.OrderBy(a => a.LastUpdated).ToList();
            CurrentDateSort = 0;
        } else {
            Accounts = Accounts.OrderByDescending(a => a.LastUpdated).ToList();
            CurrentDateSort = 1;
        }
    }

    private void UpdateGraph() {
        LoadAccountSummary();

        IDataset<decimal> dataset = new LineDataset<decimal>(dailyAccountValues.Select(v => v.Value).ToArray()) {
                Label = null,
                BackgroundColor = ColorUtil.FromDrawingColor(Color.FromArgb(150, 84, 153, 214)),
                BorderColor = ColorUtil.FromDrawingColor(Color.FromArgb(150, 84, 153, 214)),
                Fill = FillingMode.Origin,
                HoverBackgroundColor = ColorUtil.FromDrawingColor(Color.FromArgb(200, 84, 153, 214)),
                PointHoverRadius = 30
            };
        _config.Data.Datasets.Clear();
        _config.Data.Labels.Clear();

        _config.Data.Labels.AddRange(dailyAccountValues.Select(v => v.Key.ToShortDateString()).ToArray());
        _config.Data.Datasets.Add(dataset);
        StateHasChanged();
    }

    private void LoadAccountSummary() {
        dailyAccountValues = accountValueRepository.GetHistoricalAccountValueSummaryForUser(historicalDaysCount, Accounts);
        dailyAccountValues = dailyAccountValues.Reverse().ToDictionary(x => x.Key, y => y.Value);
    }

    private void ChangeDateRange(ChangeEventArgs e) {
        int selectedDateRange = int.Parse(e.Value.ToString());
        historicalDaysCount = selectedDateRange;

        UpdateGraph();
    }
}